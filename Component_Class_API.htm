<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Nestor Documentation</title>
  <link rel="stylesheet" href="css/style.css">
  <script type="text/javascript" src="js/scripts.js"></script>
</head>
<body onload="includeHTML()">
  <div id="menu" menu-html="menu.html">

  </div>

  <div class="main">
<h1>
    Extending the Component Class
</h1>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <div align="center">
                    <hr size="3" width="100%" align="center"/>
                </div>
            </td>
        </tr>
    </tbody>
</table>
<p>
    The Component Class is the base class from which all components are
    extended. This class contains a core set of methods which can be
    overwritten, as well as methods critical to system processes. This document
    describes how to use the Component class methods and properties to interact
    with the Nestor system.
</p>
<p>
    Nestor provides a robust scaffolding onto which you can build new features
    in your component that can plug into the system at multiple levels. There
    are also many opportunities to invoke a custom component method using
    system hooks. Refer to the Hooks section for more details about using
    hooks. Also, the Page Build process section refers to a series of flow
    diagrams that map the main processes executed to build a page. These
    diagrams visually depict where hooks are invoked throughout the Page Build.
</p>
<p>
    This Guide will walk through:
</p>
<p>
    1) Properties associated with components and how to assign them
</p>
<p>
    2) Methods available to be overwritten, and how they interact with the core
    Nestor engine classes
</p>
<p>
    3) Static methods called from the parent Component class that are essential
to system processes.    <strong>We strongly advise you not to alter these static methods</strong>.
</p>
<p>
    4)
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#core_functions"
    >
        Core Functions
    </a>
    – there are some core functions that you may want to add to your component
    that need to be routed properly through Nestor for them to work. These
    include functions such as
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#form_submission"
    >
        form submission
    </a>
    ,
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#file_upload"
    >
        file upload
    </a>
    , and more (file links etc?)
</p>
<p>
    5) Component with Minions
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h2>
                    <a name="properties">Properties</a>
                </h2>
            </td>
        </tr>
    </tbody>
</table>
<p>
    There are no properties set directly in the base Component class.
    Properties are assigned to the component in a few different ways:
</p>
<p>
    1) Properties that you assign programmatically. The most common way to add
    them is to put them in the properties array in
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#component_info"
    >
        component_info()
    </a>
    .
</p>
<p>
2) The parent/child/sibling relationships recorded in the    <em>[your_db]</em>_components table are added to components in the global
    $page object component array during Page Build.
</p>
<p>
    3) Properties assigned when the component is added to a Recipe using the
    Manage Recipes page, stored in the database.
</p>
<p>
    4) Properties assigned when a component is installed, activated or deleted
    using the Manage Components page, stored in the database.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="165" valign="top">
                <p>
                    <strong>Name</strong>
                </p>
            </td>
            <td width="139" valign="top">
                <p>
                    <strong>Type</strong>
                </p>
            </td>
            <td width="632" valign="top">
                <p>
                    <strong>Description</strong>
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $component_id
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    Int
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    Component ID from the <em>[your_db]</em>_components table.
                    Specifies a particular component associated with a page.
                    There can be many instances of components with the same
                    component type in the <em>[your_db]</em>_components table
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $parent_id
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    Int
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    Parent ID from the <em>[your_db]</em>_components table.
                    Component will have a parent if it’s nested under another
                    component in a Recipe, or has been added to a page by an
                    end user
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $sequence
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    Int
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    The order in which this component is rendered on a page,
related to other components on the same page. From the                    <em>[your_db]</em>_components table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $url
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    The url property is only assigned if this component is an
                    “anchor” in a recipe. This value specifies the path used to
                    load the page, and is stored in the <em>[your_db]</em>
                    _components table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $recipe
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    JSON encoded string that represents the Recipe for a page.
                    This will be added to the component if it’s an “anchor” for
                    a Recipe. From the <em>[your_db]</em>_components_meta
                    table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $created_at
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    Timestamp that represents when the component was installed
from the Manage Components page. From the                    <em>[your_db]</em>_components_meta table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $created_by
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
ID of the user that created the component. From the                    <em>[your_db]</em>_components_meta table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $title
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    Title that is set in component properties when it’s added
                    to a Recipe. Shows up in various areas of the page UX. From
                    the <em>[your_db]</em>_components_meta table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $type
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    Name of the class from which this component is created.
                    From the <em>[your_db]</em>_components_meta table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    $template
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    Specifies a template if this component uses any template
                    other than the default. From the <em>[your_db]</em>
                    _components_meta table.
                </p>
            </td>
        </tr>
        <tr>
            <td width="136" valign="top">
                <p>
                    [key]
                </p>
            </td>
            <td width="143" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" valign="top">
                <p>
                    Other key/value pairs associated with this component found
                    in the <em>[your_db]</em>_components_meta table. Examples
                    are class-specific role permissions. Can be assigned in
                    component_info() or other component methods.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Color Key:
</p>
<p>
    Purple – values that every component will have, normally from the database
</p>
<p>
    Orange – values that a component may have, source indicated in the
    description
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h2>
                    <a name="methods">Methods</a>
                </h2>
            </td>
        </tr>
    </tbody>
</table>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>Name/Syntax</strong>
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Description</strong>
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#activated"
                        >
                            activated
                        </a>
                    </strong>
                    ( )
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Called when the component is activated
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#add_component"
                        >
                            add_component
                        </a>
                    </strong>
                    ($each_recipe_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Creates and adds the HTML content to allow an end user to
                    add a component of this type to the page
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#add_component_finish"
                        >
                            add_component_finish
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Creates the HTML content to bookend the add_component( )
                    content.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#allow_sub_components"
                        >
                            allow_sub_components
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Checks that sub_components listed in recipe are allowed to
                    be created.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#as_content"
                        >
                            as_content
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Adds HTML content that will be rendered on the page.
                    Omitting will cause errors in page build
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#as_content_finish"
                        >
                            as_content_finish
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Book end of as_content.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#as_link"
                        >
                            as_link
                        </a>
                    </strong>
                    ($each_component, $vce) ***
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Create a link to represent component on a page, links to
                    the component rendered content on a separate page
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#auto_created"
                        >
                            auto_created
                        </a>
                    </strong>
                    (new_component)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, called after a component has been auto_created
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#build_sub_components"
                        >
                            build_sub_components
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Check if page object should build sub_components for this
                    component
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#check_access"
                        >
                            check_access
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Check to see if this component should be displayed.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#check_url"
                        >
                            checkurl
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#component_configuration"
                        >
                            component_configuration
                        </a>
                    </strong>
                    ( )
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Creates unique configuration fields that appear on the
                    Manage Components page for this component.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#component_info"
                        >
                            component_info
                        </a>
                    </strong>
                    ( )
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Returns an array with basic info about the component.
                    Omitting the basic properties will cause issues with your
                    component
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#create"
                        >
                            create
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, calls self::create_component method to create a
                    component and any associated auto-create components
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#create_component"
                        >
                            create_component
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, creates component by adding database records,
                    also creates any auto-create forward or reverse components
                    associated with this component
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#delete"
                        >
                            delete
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, calls delete_component method to delete all
                    traces of component from the system.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#delete_component"
                        >
                            delete_component
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, checks that we’re deleting correct component,
                    finds parent url, and calls extirpate to delete component,
                    its children, and all associated meta-data.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#disabled"
                        >
                            disabled
                        </a>
                    </strong>
                    ( )
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Called when the component is disabled
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#edit_component"
                        >
                            edit_component
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Create content to allow an end user to edit component
                    properties on a page.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#extirpate_component"
                        >
                            extirpate_component
                        </a>
                    </strong>
                    ($component_id)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, deletes component, its children, and all
                    associated meta-data.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#find_sub_components"
                        >
                            find_sub_components
                        </a>
                    </strong>
                    ($requested_component, $vce, $components, $sub_components)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Determines if get_sub_components method should be called
                    for this component during Page Build
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#form_input"
                        >
                            form_input
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Processes input from a form submission. Will decrypt the
                    dossier and route form data to the class/method indicated
                    in the dossier.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#installed"
                        >
                            installed
                        </a>
                    </strong>
                    ( )
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Called when the component is installed
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#preload_component"
                        >
                            preload_component
                        </a>
                    </strong>
                    ( )
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Called when component is pre-loaded during build process.
                    Can use to add your custom method to a system hook
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    Static
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#recipe_components"
                        >
                            recipe_components
                        </a>
                    </strong>
                    ($each_component, $vce, $auto_create_reverse = null)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Goes through the recipe and creates the components.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#recipe_fields"
                        >
                            recipe_fields
                        </a>
                    </strong>
                    ($recipe)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Adds component fields used in ManageRecipes
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#recipe_manifestation"
                        >
                            recipe_manifestation
                        </a>
                    </strong>
                    ($each_recipe_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Allows for content to be displayed when component is
                    contained within the recipe, regardless if a component was
                    created.
                </p>
                <p>
                    This is a ghostly apparition of a sub recipe item.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#recipe_manifestation_finished"
                        >
                            recipe_manifestation_finish
                        </a>
                    </strong>
                    ($each_recipe_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Closes the content to be displayed when component is
                    contained within the recipe, regardless if a component was
                    created.
                </p>
                <p>
                    This is a ghostly apparition bookend for
                    recipe_manifestation and occures after sub_component item
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#revise_component"
                        >
                            revise_component
                        </a>
                    </strong>
                    ($each_component, $vce)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Creates dossiers that are used by the edit component form
                    on a page, then calls self::edit_component().
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#removed"
                        >
                            removed
                        </a>
                    </strong>
                    ( )
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    Called when the component is deleted
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#update"
                        >
                            update
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, Kicks off the process to update a component.
                </p>
            </td>
        </tr>
        <tr>
            <td width="306" valign="top">
                <p>
                    <strong>
                        <a
                            href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#update_component"
                        >
                            update_component
                        </a>
                    </strong>
                    ($input)
                </p>
            </td>
            <td width="630" valign="top">
                <p>
                    <strong>Protected</strong>
                    function, updates the component and data passed in the
                    $input array<strong></strong>
                </p>
            </td>
        </tr>
    </tbody>
</table>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h2>
                    Method Details
                </h2>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a name="_Get_Data_Object"></a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="activated">Activated</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Method that is called when the component is activated. Method is empty in
    the base class and is meant to be overwritten. The activated() method is
    invoked when a component is activated using the Manage Components page
    included with the basic Nestor Install.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    activated()
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="162" valign="top">
                <p>
                    No parameters
                </p>
            </td>
            <td width="576" valign="top">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Overwriting this method
</h4>
<p>
    In this example the method creates an empty index.php file, if it doesn’t
    already exist, when this component is activated.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function activated() {
                </p>
                <p>
                    $mpx_directory = 'mpx';
                </p>
                <p>
                    $mpx_path = BASEPATH . $mpx_directory;
                </p>
                <p>
                    if (!file_exists($mpx_path)) {
                </p>
                <p>
                    mkdir($mpx_path);
                </p>
                <p>
                    $content = "/* empty file */";
                </p>
                <p>
                    $fp = fopen($mpx_path . "/index.php","wb");
                </p>
                <p>
                    fwrite($fp,$content);
                </p>
                <p>
                    fclose($fp);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="allow_sub_components">Allow Sub Components</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Checks that sub_components listed in recipe are allowed to be created.
    Called during the Page Build process to see if
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#recipe_components"
    >
        recipe_components(
    </a>
    ) should be called for the component being processed.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    allow_sub_components($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="200" valign="top">
                <p>
                    $each_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="575" valign="top">
                <p>
                    A component that can be used to generate content.
                    Generally, this is the component currently being processed
                    by $page during the Page Build process. It originates from
                    the page component array.
                </p>
            </td>
        </tr>
        <tr>
            <td width="200" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="575" valign="top">
                <p>
                    The global $vce object, passed for convenience.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Return true if sub_components under $each component can be
                    built out, false if they should not be built out. Returns
                    true by default.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the method
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    if
                    ($this_component-&gt;allow_sub_components($each_component,
                    $vce)) {
                </p>
                <p>
                    $this_component-&gt;recipe_components($each_component,
                    $vce);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the method
</h4>
<p>
    In this example, the component has set a limit of how many sub_components
    can be rendered. When this number is reached, allow_sub_components returns
    false.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function allow_sub_components($each_component, $vce)
                    {
                </p>
                <p>
                    if (isset($each_component-&gt;components) &amp;&amp;
                </p>
                <p>
                    isset($each_component-&gt;components_limit)) {
                </p>
                <p>
                    if (count($each_component-&gt;components) &gt;=
                </p>
                <p>
                    $each_component-&gt;components_limit) {
                </p>
                <p>
                    return false;
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
                <p>
                    return true;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="add_component"></a>
                    <a name="add_content">Add </a>
                    Component
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Create the HTML content that will be added to allow an end user to add a
    component of this type to the page.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    add_component ($each_recipe_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_recipe_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The recipe component for which you are creating content
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The global $vce object, passed for convenience
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
</h4>
<h4>
    Example – Calling the function
</h4>
<p>
    add_component() is called from the Component recipe_components() method.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    this_component-&gt;add_component((object)
                    $each_recipe_component, $vce);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting this function
</h4>
<p>
    This example shows how to create and add a dossier to a form for
    submission. To learn more about dossiers and the form input/submission
    setup, visit the Form Submission section of this guide.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    // create dossier
                </p>
                <p>
                    $dossier_for_create =
                    $vce-&gt;page-&gt;generate_dossier($recipe_component-&gt;dossier);
                </p>
                <p>
                    // create dossier for checkurl functionality
                </p>
                <p>
                    $dossier = array(
                </p>
                <p>
                    'type' =&gt; $recipe_component-&gt;type,
                </p>
                <p>
                    'procedure' =&gt; 'checkurl'
                </p>
                <p>
                    );
                </p>
                <p>
                    // add dossier, which is an encrypted json object of
                    details uses in the form
                </p>
                <p>
                    $dossier_for_checkurl =
                    $vce-&gt;page-&gt;generate_dossier($dossier);
                </p>
                <p>
                    $content = &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;div class="clickbar-container admin-container
                    add-container"&gt;
                </p>
                <p>
                    &lt;div class="clickbar-content"&gt;
                </p>
                <p>
                    &lt;form id="create_items" class="asynchronous-form"
                    method="post" action="$vce-&gt;page-&gt;input_path"
                    autocomplete="off"&gt;
                </p>
                <p>
                    &lt;input type="hidden" name="dossier"
                    value="$dossier_for_create"&gt;
                </p>
                <p>
                    &lt;label&gt;
                </p>
                <p>
                    &lt;input id="create-title" type="text" name="title"
                    tag="required" autocomplete="off"&gt;
                </p>
                <p>
                    &lt;div class="label-text"&gt;
                </p>
                <p>
                    &lt;div class="label-message"&gt;Name of
                    $recipe_component-&gt;title&lt;/div&gt;
                </p>
                <p>
                    &lt;div class="label-error"&gt;Enter a Title&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;/label&gt;
                </p>
                <p>
                    &lt;label&gt;
                </p>
                <p>
                    &lt;input class="check-url" type="text" name="url" value=""
                    parent_url="$recipe_component-&gt;parent_url/"
                    dossier="$dossier_for_checkurl" tag="required"
                    autocomplete="off"&gt;
                </p>
                <p>
                    &lt;div class="label-text"&gt;
                </p>
                <p>
                    &lt;div class="label-message"&gt;URL&lt;/div&gt;
                </p>
                <p>
                    &lt;div class="label-error"&gt;Enter a URL&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;/label&gt;
                </p>
                <p>
                    &lt;input type="submit" value="Create"&gt;
                </p>
                <p>
                    &lt;/form&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;div class="clickbar-title
                    clickbar-closed"&gt;&lt;span&gt;Add A New
                    $recipe_component-&gt;title&lt;/span&gt;&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    $vce-&gt;content-&gt;add('main', $content);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="add_component_finish">Add Component Finish</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Create the HTML content to bookend the add_component( ) content.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    add_component_finish ($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_recipe_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The recipe component for which you are creating content
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The global vce object, passed for convenience
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the function
</h4>
<p>
    Add_component_finish() is called from the Page build_content() method, near
    the end of each component processing cycle.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    // call book end for recipe_components, similar to
                    as_content_finish
                </p>
                <p>
                    $previous_component-&gt;add_component_finish($each_component,
                    $this);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the function
</h4>
<p>
    In the Comments component, if there are exiting comments at this level,
    then "Add Comments" would be placed under comments.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function add_component_finish($each_component, $vce)
                    {
                </p>
                <p>
                    // check for special property main_*parent_id*
                </p>
                <p>
                    $add_component = 'main_' .
                    $each_component-&gt;component_id;
                </p>
                <p>
                    if (!empty($vce-&gt;content-&gt;$add_component)) {
                </p>
                <p>
                    $ vce-&gt;content-&gt;add('main',
                    $vce-&gt;content-&gt;$add_component);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="as_content">As Content</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Allows you to add HTML content to the page. This method must contain code
    to add your content to the global $content object. as_content( ) is called
    during the page build process, so is a critical function for your custom
    component. Removing this function from your class file will cause errors.
    Also, if the method returns false, the page build process will be halted
    after outputting the content added to the global $content object by this
    method.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    as_content ($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    A component that can be used to generate content.
                    Generally, this is the component currently being processed
                    by $page during the Page Build process. It originates from
                    the page component array.
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The global $vce object, passed for convenience. Can be used
                    to access the global $content object.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Only use if you want to stop the page build process, in
                    which case return false. By default no return.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling this method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    //if user has permission to view content, display component
                    content
                </p>
                <p>
                    if ($this_component-&gt;check_access($each_component,
                    $vce)) {
                </p>
                <p>
                    $as_content =
                    $this_component-&gt;as_content($each_component, $vce);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Overwriting this method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function as_content($each_component, $vce) {
                </p>
                <p>
                    $my_content = "Blog-o-rama says hello!";
                </p>
                <p>
                    $vce-&gt;content-&gt;add('main', "My content: " .
                    $my_content);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="as_content_finish">As Content Finish</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Allows you to add “bookend” HTML content to the page. This is called near
    the end of the build_content( ) method in Page, and provides a way to add
    content after recipe components are created.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    as_content_finish ($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    A component that can be used to generate content.
                    Generally, this is the component currently being processed
                    by $page during the Page Build process. It originates from
                    the page component array.
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The global $vce object, passed for convenience. Can be used
                    to access the global $content object.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return value by default
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling this method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $this_component-&gt;as_content_finish($each_component,
                    $vce);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Overwriting this method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function as_content_finish($each_component, $vce) {
                </p>
                <p>
                    $vce-&gt;content-&gt;add('main','&lt;/div&gt;');
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="as_link">As Link</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Create a link to represent component on a page, links to the component
    rendered content on a separate page. Then adds this link to the content
    object for page rendering. This can happen in a Recipe with nested URLs –
    this component has an associated URL but a previous component with a URL
    was the requested id.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    as_link($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Instance of component for which you are generating an HTML
                    link
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Return false if…
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method
</h4>
<p>
    While building content for the page, the $page object checks each component
    in the hierarchy after the requested component. If a subordinate component
    has its own URL, $page generates a link to this component’s page instead of
    rendering its content.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $this_component-&gt;as_link($each_component, $vce);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    The default method in Component generates a simple HTML link. You could
    overwrite this to provide more information, add a graphic, or customize as
    you wish.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function as_link($each_component, $vce) {
                </p>
                <p>
                    $title = “Click here for a really cool page”;
                </p>
                <p>
                    $vce-&gt;content-&gt;main .= '&lt;div
                    class="items-link"&gt;
                </p>
                <p>
                    &lt;a href="' . $vce-&gt;site-&gt;site_url . '/' .
                </p>
                <p>
                    $each_component-&gt;url . '"&gt;' . $title .
                    '&lt;/a&gt;&lt;/div&gt;' . PHP_EOL;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="auto_created">Auto Created</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    This function is called after a component has been auto-created. Empty in
    parent Component class, meant to be overwritten. Is called in the
    $auto_create_components anonymous function within the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#create_component"
    >
        create_component
    </a>
    method, after the auto-create component is created.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    auto_created($new_component)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $new_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array containing properties of component which has been
                    created.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values by default
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method
</h4>
<p>
    When components are auto-created in the create_component method,
    auto-created is called from the Class type of the component that has been
    created.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $new_component['type']::auto_created($new_component)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="build_sub_components">Build Sub Components</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Check if page object should build sub_components for this component during
    the Page Build Process. Building involves creating and displaying content.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    <a
                        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#build_sub_components"
                    >
                        build_sub_components
                    </a>
                    <strong> </strong>
                    ($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    A component that can be used to generate content.
                    Generally, this is the component currently being processed
                    by $page during the Page Build process. It originates from
                    the page component array.
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The global $vce object, passed for convenience.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Return true if sub_components under $each component can be
                    built out, false if they should not be built out. Returns
                    true by default.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    /* Called in Page class, in the build_content() method.
                    Determines if
                </p>
                <p>
                    ** recursive calls should be made to build out
                    sub-components for the
                </p>
                <p>
                    ** current component
                </p>
                <p>
                    */
                </p>
                <p>
                    if
                    ($this_component-&gt;build_sub_components($each_component,
                    $vce)) {
                </p>
                <p>
                    // recursive call for sub component
                </p>
                <p>
                    self::build_content($sub_components, $recipe,
                    $requested_id, $linked,
                </p>
                <p>
                    $recipe_tracker);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    // only show sub-components if current user created the
                    component, meaning
                </p>
                <p>
                    // they added it to the page
                </p>
                <p>
                    public function build_sub_components($each_component, $vce)
                    {
                </p>
                <p>
                    if ($each_component-&gt;created_by ==
                    $vce-&gt;user-&gt;user_id) {
                </p>
                <p>
                    return true;
                </p>
                <p>
                    }
                </p>
                <p>
                    return false;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="check_access">Check Access</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Checks to see if this component should be displayed. This is fired within
    class.page.php in build_content(). Also, if you would like to add something
    to the $page object that can be used by sub_components, this would be where
    to add that sort of thing $vce-&gt;page-&gt;key = "value".
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    check_access($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The current component being processed by Page
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Global $vce object, passed for convenience
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Returns true by default. If this function returns false,
                    content will not be built for this component
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    //if a component’s check_access() returns true, then
                    display content
                </p>
                <p>
                    if ($this_component-&gt;check_access($each_component, $vce)
                    {
                </p>
                <p>
                    $as_content =
                    $this_component-&gt;as_content($each_component, $vce);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    //check that user has role that will allow access
                </p>
                <p>
                    public function check_access($each_component, $vce) {
                </p>
                <p>
                    global $user;
                </p>
                <p>
                    if (isset($user-&gt;role_id)) {
                </p>
                <p>
                    // check if user_id is in role_access
                </p>
                <p>
                    if (!in_array($user-&gt;role_id,
                </p>
                <p>
                    explode('|',$each_component-&gt;role_access))) {
                </p>
                <p>
                    return false;
                </p>
                <p>
                    }
                </p>
                <p>
                    } else {
                </p>
                <p>
                    // no user role.
                </p>
                <p>
                    if (count($each_component-&gt;role_access)) {
                </p>
                <p>
                    return false;
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
                <p>
                    return true;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="check_url">Check URL</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Description
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    syntax
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Name
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Datatype
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    desc
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Datatype
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    desc
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Return array
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="158" valign="top">
            </td>
            <td width="104" valign="top">
                <p>
                    Datatype
                </p>
            </td>
            <td width="674" valign="top">
                <p>
                    desc
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
            </td>
            <td width="104" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="674" valign="top">
                <p>
                    Array desc
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="936" colspan="4" valign="top">
                <p>
                    Members of the returned array
                </p>
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    Name
                </p>
            </td>
            <td width="104" valign="top">
                <p>
                    Datatype
                </p>
            </td>
            <td width="674" valign="top">
                <p>
                    desc
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Hooks
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    Hook name and Description of Hook
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    example
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="component_configuration">
                        Component Configuration
                    </a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Creates unique configuration fields that appear on the Manage Components
    page for this component. When this method is left in the default state of
    returning false, the component will not be available to add to a recipe.
    The parent Component method is empty so this method will need to be fleshed
    for any custom component that you want to be configurable in Manage
    Components.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    component_configuration()
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No default parameters
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Returns false by default, which will prevent
                    ManageComponents from adding the configuration element to
                    this component
                </p>
                <p>
                    (prevent a component from being available to add to a
                    recipe)
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Returns HTML content to create unique configuration fields
                    for this component
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling this Method
</h4>
<p>
    When ManageComponents builds out the Manage Components page, it looks at
    each component and checks if the component is active and if it returns
    anything besides false from component_configuration. If content is
    returned, that content is added to an expandable configuration area that
    contains these unique configuration fields.
</p>
<p>
    Notice that this code block creates a dossier called
    “$dossier_for_configure”. When this form is submitted, this dossier routes
    the submitted data to a method called “configure” in the ManageComponents
    class. This method encrypts a json-encoded string that represents all
    input, and inserts this into the [<em>your_db</em>]_site_meta table.
</p>
<p>
    Refer to the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#form_submission"
    >
        Form Submission section
    </a>
    for more information.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    if (isset($activated_components[$type]) &amp;&amp;
                </p>
                <p>
                    $fields = $current_component-&gt;component_configuration())
                    {
                </p>
                <p>
                    $dossier_for_configure =
                </p>
                <p>
                    $vce-&gt;user-&gt;encryption(json_encode(array('type' =&gt;
                </p>
                <p>
                    'ManageComponents','procedure' =&gt; 'configure',
                </p>
                <p>
                    'component' =&gt;
                    $type)),$vce-&gt;user-&gt;session_vector);
                </p>
                <p>
                    $content .= &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;div class="clickbar-container"&gt;
                </p>
                <p>
                    &lt;div class="clickbar-content"&gt;
                </p>
                <p>
                    &lt;form id="$type-configuration"
                    class="configure-component" method="post" action="$
                    vce-&gt;page-&gt;input_path" autocomplete="off"&gt;
                </p>
                <p>
                    &lt;input type="hidden" name="dossier"
                    value="$dossier_for_configure"&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    $content .= $fields;
                </p>
                <p>
                    $content .= &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;input type="submit" value="Save"&gt;
                </p>
                <p>
                    &lt;/form&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;div class="clickbar-title
                    clickbar-closed"&gt;&lt;span&gt;Configure&lt;/span&gt;&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting this Method
</h4>
<p>
    The Blog-o-rama component has code to add configuration elements to allow a
    user to submit an author alias. This example receives data from the user
    but doesn’t display any previously submitted data. Note it doesn’t
    associate data with a specific user.
</p>
<p>
    On submission, the configure() method in the ManageComponents class
    encrypts a json-encoded string that represents all field input, and inserts
    this into the [<em>your_db</em>]_site_meta table. You would need to
    retrieve and decrypt this string and use it in this method to reflect any
    user-submitted data.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function component_configuration() {
                </p>
                <p>
                    global $vce;
                </p>
                <p>
                    $author_alias = $vce-&gt;user-&gt;first_name;
                </p>
                <p>
                    $elements = &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;label&gt;
                </p>
                <p>
                    &lt;input type="text" name="author_alias"
                    value="$author_alias" autocomplete="off"&gt;
                </p>
                <p>
                    &lt;div class="label-text"&gt;
                </p>
                <p>
                    &lt;div class="label-message"&gt;Author Alias&lt;/div&gt;
                </p>
                <p>
                    &lt;div class="label-error"&gt;Enter Your Author
                    Alias&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;/label&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    return $elements;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="component_info">Component Info</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Returns an array with basic info about the component. This array has an
    optional array of permissions - see the Site Roles section in the Site
    Class API for more information about how these are set and used in the
    Nestor system. You can extend this method to add custom properties to your
    component by adding key/value pairs to the return array.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    component_info()
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="162" valign="top">
                <p>
                    No parameters
                </p>
            </td>
            <td width="576" valign="top">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return array
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="158" valign="top">
            </td>
            <td width="112" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="665" colspan="2" valign="top">
                <p>
                    Contains basic info about the component
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="936" colspan="5" valign="top">
                <p>
                    Potential members of the returned array
                </p>
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    name
                </p>
            </td>
            <td width="112" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="665" colspan="2" valign="top">
                <p>
                    Name of the Component
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    description
                </p>
            </td>
            <td width="112" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="665" colspan="2" valign="top">
                <p>
                    Description of the Component
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    category
                </p>
            </td>
            <td width="112" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="665" colspan="2" valign="top">
                <p>
                    Component category in which the Component belongs. This can
                    be used to filter views of the components; an example is
                    the Manage Components Page installed with Nestor.
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    [key]
                </p>
            </td>
            <td width="112" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="665" colspan="2" valign="top">
                <p>
                    Any key/value pairs that you add to the return array to
                    customize your component
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    permissions
                </p>
            </td>
            <td width="112" valign="top">
                <p>
                    Array
                </p>
                <p>
                    (Optional)
                </p>
            </td>
            <td width="665" colspan="2" valign="top">
                <p>
                    Assigns unique permissions to Site roles; these permissions
                    will be defined in and used by your Component.
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="936" colspan="5">
                <p>
                    Values set in component info permissions array
                </p>
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    name
                </p>
            </td>
            <td width="121" colspan="2" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" colspan="2" valign="top">
                <p>
                    Name of the unique permission
                </p>
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    description
                </p>
            </td>
            <td width="121" colspan="2" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="657" colspan="2" valign="top">
                <p>
                    Description of how this permission is used
                </p>
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    type
                </p>
            </td>
            <td width="121" colspan="2" valign="top">
                <p>
                    String
                </p>
                <p>
                    (Optional)
                </p>
            </td>
            <td width="657" colspan="2" valign="top">
                <p>
                    If set to ‘singular’, role options will be shown as radio
                    buttons. If not set to ‘singular’, options will have check
                    boxes.
                </p>
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
            </td>
            <td width="112" valign="top">
            </td>
            <td width="665" colspan="2" valign="top">
            </td>
            <td width="1">
            </td>
        </tr>
        <tr height="0">
            <td width="149">
            </td>
            <td width="119">
            </td>
            <td width="7">
            </td>
            <td width="433">
            </td>
            <td width="1">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    //return and display component info from the current class
                </p>
                <p>
                    //alter return array in component_info()
                </p>
                <p>
                    public function component_info() {
                </p>
                <p>
                    return array(
                </p>
                <p>
                    'name' =&gt; 'Blog-o-rama',
                </p>
                <p>
                    'description' =&gt; 'Create and display blog posts and
                    comments',
                </p>
                <p>
                    'category' =&gt; 'blog',
                </p>
                <p>
                    'permissions' =&gt; array(
                </p>
                <p>
                    array(
                </p>
                <p>
                    'name' =&gt; 'Read',
                </p>
                <p>
                    'description' =&gt; 'Can read posts'
                </p>
                <p>
                    ),
                </p>
                <p>
                    array(
                </p>
                <p>
                    'name' =&gt; 'Write',
                </p>
                <p>
                    'description' =&gt; 'Can add and update posts'
                </p>
                <p>
                    ),
                </p>
                <p>
                    array(
                </p>
                <p>
                    'name' =&gt; 'Delete',
                </p>
                <p>
                    'description' =&gt; 'Can delete posts'
                </p>
                <p>
                    )
                </p>
                <p>
                    )
                </p>
                <p>
                    );
                </p>
                <p>
                    }
                </p>
                <p>
                    //call component_info() from as_content() function of the
                    same class
                </p>
                <p>
                    public function as_content($each_component, $vce) {
                </p>
                <p>
                    $my_content = $this-&gt;component_info();
                </p>
                <p>
                    $vce-&gt;content-&gt;add('main', "My content: " .
                </p>
                <p>
                    var_dump($my_content));
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="create">Create</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Kicks off the process to create a component. Receives component info and
    calls to create_component method to have database records created for the
    component. Is called asynchronously when a new component is added to a
    page, and the component’s form has a dossier with ‘procedure’ set to
    ‘create’. Adds a site attribute with a message that the specified component
    was created.
</p>
<p>
    This is a good function to customize if there is something extra you’d like
    done when your component is added to a page, such as adding a hook to fire
    each time a component of this type is created.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    create($input)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $input
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array that contains properties of new component that will
                    be created
                </p>
            </td>
        </tr>
        <tr>
            <td width="936" colspan="3" valign="top">
                <p>
                    Potential members of the $input array
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    title
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Title if it’s set in $input, type if it’s not set
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    parent_id
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    ID of parent, if it’s not set in $input this will be set to
                    ‘0’
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    auto_create
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    array (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array of components which can be auto-created
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    url
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    url associated with the component, if set in $input will be
                    cleaned by url_checker method
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    type
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Class type of component
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    sequence
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Order in which this component will be rendered on the page,
                    will be set to 1 if not set in $input
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    [<em>key</em>]
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
Any other key/value pairs added to input will be added to [                    <em>your_db</em>]_components_meta
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="162" valign="top">
            </td>
            <td width="576" valign="top">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    Echos success or failure message
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the method<strong></strong>
</h4>
<p>
    The create method is not normally called verbatim in PHP code, but instead
    is triggered when the procedure value in a dossier is set to ‘create’, and
    a form with this dossier is submitted from a page. See the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#form_input"
    >
        Form Input
    </a>
    section for more details.
</p>
<h4>
    Example – Overwriting the method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    protected function create($input) {
                </p>
                <p>
                    // media_create_component
                </p>
                <p>
                    if (isset($site-&gt;hooks['media_create_component'])) {
                </p>
                <p>
                    foreach($site-&gt;hooks['media_create_component'] as $hook)
                    {
                </p>
                <p>
                    $input = call_user_func($hook, $input);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
                <p>
                    $component_id = self::create_component($input);
                </p>
                <p>
                    echo json_encode(array('response' =&gt;
                    'success','procedure' =&gt;
                </p>
                <p>
                    'create','action' =&gt; 'reload',
                </p>
                <p>
                    'message' =&gt; 'New Component Was Created'));
                </p>
                <p>
                    return;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="create_component">Create Component</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Called by Component create method. Receives an array of properties and uses
    these properties to create records in the database. Add created_by and
    created_at properties, using current user ID and timestamp.
</p>
<p>
    Creates a new component in [<em>your_db</em>]_components table using
parent_id, sequence, and url. Adds any other data as key/value pairs to [    <em>your_db</em>]_components_meta table.
</p>
<p>
    Will create the new component specified, then look through the recipe for
    any components with auto_create set and will create those according to
    their setting – ‘forward’ or ‘reverse’. Auto_create array is built and
    added to the dossier by the recipe_component method during page build.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    create_component($input)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $input
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array that contains properties of new component that will
                    be created
                </p>
            </td>
        </tr>
        <tr>
            <td width="936" colspan="3" valign="top">
                <p>
                    Potential members of the $input array
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    title
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Title if it’s set in $input, type if it’s not set
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    parent_id
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    ID of parent, if it’s not set in $input this will be set to
                    ‘0’
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    auto_create
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    array (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array of components which can be auto-created
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    url
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    url associated with the component, if set in $input will be
                    cleaned by url_checker method
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    type
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Class type of component
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    sequence
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Order in which this component will be rendered on the page,
                    will be set to 1 if not set in $input
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    [<em>key</em>]
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
Any other key/value pairs added to input will be added to [                    <em>your_db</em>]_components_meta
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Int
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    ID of new component
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
</h4>
<h4>
    Hooks
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    create_component_before invoked before component is
                    created, receives and returns altered $input array
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $component_id = self::create_component($input);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    This method is fleshed out in the parent Component Class, and we don’t
    recommend overwriting it. If you need to customize the component creation
    process, use the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#create"
    >
        create method
    </a>
    or add a create_component_before hook.
</p>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="delete">Delete</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Kicks off the process to delete a component. Calls delete_component method
    to delete all traces of component from the system. Is called asynchronously
    when a user chooses to remove a component from a page, and submits a
    component form with a dossier with ‘procedure’ set to ‘delete’. Adds a site
    attribute with a message that the specified component was deleted.
</p>
<p>
    This is a good function to customize if there is something extra you’d like
    done when your component is deleted from a page, such as adding a hook to
    fire each time a component of this type is deleted.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    delete($input)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $input
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array that contains properties of component to delete
                </p>
            </td>
        </tr>
        <tr>
            <td width="936" colspan="3" valign="top">
                <p>
                    Potential members of the $input array
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    component_id
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Int
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    ID of component to be deleted
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    parent_url
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    url associated with top level parent of the recipe/page
                    this component belongs to.
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    created_at
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Timestamp of when component was created.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    Echos success or failure message
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the method<strong></strong>
</h4>
<p>
    The delete method is not normally called verbatim in PHP code, but instead
    is triggered when the procedure value in a dossier is set to ‘delete’, and
    a form with this dossier is submitted from a page. See the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#form_input"
    >
        Form Input
    </a>
    section for more details.
</p>
<h4>
    Example – Overwriting the method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    protected function delete($input) {
                </p>
                <p>
                    global $site;
                </p>
                <p>
                    // media_delete_component
                </p>
                <p>
                    if (isset($site-&gt;hooks['media_delete_component'])) {
                </p>
                <p>
                    foreach($site-&gt;hooks['media_delete_component'] as $hook)
                    {
                </p>
                <p>
                    $input = call_user_func($hook, $input);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
                <p>
                    $parent_url = self::delete_component($input);
                </p>
                <p>
                    if (isset($parent_url)) {
                </p>
                <p>
                    echo json_encode(array('response' =&gt; 'success',
                </p>
                <p>
                    'procedure' =&gt; 'delete','action' =&gt; 'reload',
                </p>
                <p>
                    'url' =&gt; $parent_url, 'message' =&gt; "Deleted"));
                </p>
                <p>
                    return;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="delete_component">Delete Component</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Checks that certain values are present in $input to get component ready for
    deletion. If no component_id is set, echos an error message and then
    returns. If parent_url is not set, calls an anonymous function recursively
    to find the url associated with top level parent of the recipe/page this
    component belongs to. Check that $input[‘created_at’] matches the value in
    the database associated with the component ID as a security check to make
    sure we are deleting the correct component. Call extirpate_component method
    if all checks pass.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    delete($input)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $input
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array that contains properties of component to delete
                </p>
            </td>
        </tr>
        <tr>
            <td width="936" colspan="3" valign="top">
                <p>
                    Potential members of the $input array
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    component_id
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Int
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    ID of component to be deleted
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    parent_url
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    url associated with top level parent of the recipe/page
                    this component belongs to.
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    created_at
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Timestamp of when component was created.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    url associated with top level parent of the recipe/page
                    this component belongs to.
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Returns with error message if no component ID
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Returns false if $input[‘created_at’] and database value
                    for ‘created_at’ don’t match (and function hasn’t already
                    returned)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $parent_url = self::delete_component($input);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    This method is fleshed out in the parent Component Class, and we don’t
    recommend overwriting it. If you need to customize the component deletion
    process, use the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#delete"
    >
        delete method
    </a>
    .
</p>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<p>
    <u></u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="disabled">Disabled</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Method that is called when the component is disabled. Method is empty in
    the base class and is meant to be overwritten. The disabled() method is
    invoked when a component is disabled using the Manage Components page
    included with the basic Nestor Install.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    disabled()
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="162" valign="top">
                <p>
                    No parameters
                </p>
            </td>
            <td width="576" valign="top">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the function
</h4>
<p>
    When a component is marked disabled in ManageComponents, it goes through
    and calls the disabled function of the component.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    foreach ($disable_items as $type=&gt;$path) {
                </p>
                <p>
                    // load class
                </p>
                <p>
                    require_once(BASEPATH . $path);
                </p>
                <p>
                    $disabled = new $type();
                </p>
                <p>
                    // fire installed function
                </p>
                <p>
                    $disabled-&gt;disabled();
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<p>
    <u></u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="edit_component">Edit Component</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Creates the HTML that allows the end user to edit or delete the component
    on a page. Is called during Page build process from build_content( ). The
    parent Component method is empty so this method will need to be fleshed for
    any custom component that you want to be editable by an end user.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    edit_component ($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="288" valign="top">
                <p>
                    $each_recipe_component
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The recipe component for which you are creating content
                </p>
            </td>
        </tr>
        <tr>
            <td width="288" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The global vce object, passed for convenience
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Datatype
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    desc
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method
</h4>
<p>
    Page::build content( ) checks that the component is allowed to be edited,
    then calls the component’s edit_component( ) method.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    if (!isset($each_component-&gt;prevent_editing) ||
                </p>
                <p>
                    $each_component-&gt;prevent_editing === false) {
                </p>
                <p>
                    $this_component-&gt;edit_component($each_component, $this);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    In order to function, this method should:
</p>
<p>
    1) Call $vce-&gt;page-&gt;can_edit() to make sure user has permissions to
    edit the component
</p>
<p>
    2) Generate dossiers for edit and delete
</p>
<p>
    3) Build HTML content to allow a user to edit properties of the component
    on a page. The content should encapsulate a form submission element that
    contains the component dossiers as properties.
</p>
<p>
    4) Add generated HTML content to the global $content object
</p>
<p>
    Refer to the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#form_submission"
    >
        Form Submission section
    </a>
    for more information about submitting and receiving form data in the Nestor
    system.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function edit_component($each_component, $page) {
                </p>
                <p>
                    if ($vce-&gt;page-&gt;can_edit($each_component)) {
                </p>
                <p>
                    // the instructions to pass through the form
                </p>
                <p>
                    $dossier = array(
                </p>
                <p>
                    'type' =&gt; $each_component-&gt;type,
                </p>
                <p>
                    'procedure' =&gt; 'update',
                </p>
                <p>
                    'component_id' =&gt; $each_component-&gt;component_id,
                </p>
                <p>
                    'created_at' =&gt; $each_component-&gt;created_at
                </p>
                <p>
                    );
                </p>
                <p>
                    // generate dossier
                </p>
                <p>
                    $dossier_for_update = $
                    vce-&gt;page-&gt;generate_dossier($dossier);
                </p>
                <p>
                    $content = &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;div class="clickbar-container admin-container
                    edit-container"&gt;
                </p>
                <p>
                    &lt;div class="clickbar-content"&gt;
                </p>
                <p>
                    &lt;form id="update_$each_component-&gt;component_id"
                    class="asynchronous-form" method="post" action="$
                    vce-&gt;page-&gt;input_path" autocomplete="off"&gt;
                </p>
                <p>
                    &lt;input type="hidden" name="dossier"
                    value="$dossier_for_update"&gt;
                </p>
                <p>
                    &lt;label&gt;
                </p>
                <p>
                    &lt;input type="text" name="title"
                    value="$each_component-&gt;title" tag="required"
                    autocomplete="off"&gt;
                </p>
                <p>
                    &lt;div class="label-text"&gt;
                </p>
                <p>
                    &lt;div class="label-message"&gt;Title&lt;/div&gt;
                </p>
                <p>
                    &lt;div class="label-error"&gt;Enter a Title&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;/label&gt;
                </p>
                <p>
                    &lt;label&gt;
                </p>
                <p>
                    &lt;input type="text" name="url"
                    value="$each_component-&gt;url"
                    dossier="$dossier_for_checkurl" autocomplete="off"&gt;
                </p>
                <p>
                    &lt;div class="label-text"&gt;
                </p>
                <p>
                    &lt;div class="label-message"&gt;URL&lt;/div&gt;
                </p>
                <p>
                    &lt;div class="label-error"&gt;Enter a URL&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;/label&gt;
                </p>
                <p>
                    &lt;label&gt;
                </p>
                <p>
                    &lt;input type="text" name="sequence"
                    value="$each_component-&gt;sequence"&gt;
                </p>
                <p>
                    &lt;div class="label-text"&gt;
                </p>
                <p>
                    &lt;div class="label-message"&gt;Order Number&lt;/div&gt;
                </p>
                <p>
                    &lt;div class="label-error"&gt;Enter an Order
                    Number&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;/label&gt;
                </p>
                <p>
                    &lt;input type="submit" value="Update"&gt;
                </p>
                <p>
                    &lt;/form&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    if ($page-&gt;can_delete($each_component)) {
                </p>
                <p>
                    // the instructions to pass through the form
                </p>
                <p>
                    $dossier = array(
                </p>
                <p>
                    'type' =&gt; $each_component-&gt;type,
                </p>
                <p>
                    'procedure' =&gt; 'delete',
                </p>
                <p>
                    'component_id' =&gt; $each_component-&gt;component_id,
                </p>
                <p>
                    'created_at' =&gt; $each_component-&gt;created_at
                </p>
                <p>
                    );
                </p>
                <p>
                    // generate dossier
                </p>
                <p>
                    $dossier_for_delete = $
                    vce-&gt;page-&gt;generate_dossier($dossier);
                </p>
                <p>
                    $content .= &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;form id="delete_$each_component-&gt;component_id"
                    class="delete-form float-right-form asynchronous-form"
                    method="post"
                </p>
                <p>
                    action="$vce-&gt;page-&gt;input_path"&gt;
                </p>
                <p>
                    &lt;input type="hidden" name="dossier"
                    value="$dossier_for_delete"&gt;
                </p>
                <p>
                    &lt;input type="submit" value="Delete"&gt;
                </p>
                <p>
                    &lt;/form&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    }
                </p>
                <p>
                    $content .= &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;div class="clickbar-title
                    clickbar-closed"&gt;&lt;span&gt;Edit
                    $each_component-&gt;title&lt;/span&gt;&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    $ vce-&gt;page-&gt;content-&gt;add('admin', $content);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="extirpate_component">Extirpate Component</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Takes component ID and searches for all children. For the component and
    then for each of its children - looks for and deletes any related
    media/files and any datalists. Deletes the component and then recursively
    calls extirpate_component for each child. Note that each child could
    potential have its own children, each of these would also be extirpated
    recursively.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    extirpate_component($component_id)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    component_id
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Int
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    ID of component to be obliterated from the system
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return value
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Hooks
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    delete_extirpate_component called before component and it’s
                    children are deleted. Receives component ID and array of
                    children component IDs, and returns altered $components
                    array.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    self::extirpate_component($input['component_id']);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    This method is fleshed out in the parent Component Class, and we don’t
    recommend overwriting it. If you need to customize the component deletion
    process, use the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#delete"
    >
        delete method.
    </a>
</p>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<p>
    <u></u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="find_sub_components">Find Sub Components</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    This method is called by the Page object during the page build process. It
    checks if the Page get_sub_components method should be called for this
    component, and is checked in both get_components and get_sub_components,
    which is why both variables are available. The return value is set to true
    by default, but can be set to false if there is a reason you wouldn’t want
    to build out the full component tree under your component.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function find_sub_components($requested_component,
                    $vce, $components, $sub_components)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="252" valign="top">
                <p>
                    $requested_component
                </p>
            </td>
            <td width="108" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The requested component is the component that $page has
                    identified either by the requested URL path, or by a
                    component ID supplied on a querystring. This component will
                    contain the Recipe that the $page uses to render the page
                    content.
                </p>
            </td>
        </tr>
        <tr>
            <td width="252" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="108" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The global $vce object, passed for convenience
                </p>
            </td>
        </tr>
        <tr>
            <td width="252" valign="top">
                <p>
                    $components
                </p>
            </td>
            <td width="108" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The $components array being built by the $page process. At
                    the point that it’s passed into this function, it will
                    contain the requested component and any components upstream
                    in the recipe inclusive of its branch, but not necessarily
                    other branches.
                </p>
            </td>
        </tr>
        <tr>
            <td width="252" valign="top">
                <p>
                    $sub_components
                </p>
            </td>
            <td width="108" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The $sub_components array being built by the $page process.
                    At the point that it’s passed into this function, it will
                    contain the requested component and any components upstream
                    in the recipe inclusive of its branch, but not necessarily
                    other branches.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Returns true by default
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    //call from the global $page object from get_components
                    method
                </p>
                <p>
                    $find_sub_components =
                    $current_component-&gt;find_sub_components
                </p>
                <p>
                    ($requested_component, $this, $components, $sub_components
                    =
                </p>
                <p>
                    array());
                </p>
                <p>
                    if ($find_sub_components) {
                </p>
                <p>
                    // get sub-components
                </p>
                <p>
                    $nested_components =
                    self::get_sub_components($requested_id,
                </p>
                <p>
                    $requested_id, $components);
                </p>
                <p>
                    // add sub_components to components list
                </p>
                <p>
                    $components[(count($components)-1)]-&gt;components =
                    $nested_components;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<p>
    <u></u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="form_input">Form Input</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Processes input from a form submission. Will decrypt the dossier and route
    form data to the class/method indicated in the dossier. Your component will
    need to contain a method that processes the data.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    form_input($input)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $input
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Contains key/value pairs representing the form data
                    submitted, and the dossier data.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No values returned, will echo an error if method is not
                    known
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method
</h4>
<p>
    The Input component catches any form submissions and then routes the data
    to form_input( ) method of the class and method indicated in the dossier.
    If the class/method don’t exist, will default to the parent Component class
    method.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    if (method_exists($this_component,'form_input')) {
                </p>
                <p>
                    $this_component-&gt;form_input($input);
                </p>
                <p>
                    } else {
                </p>
                <p>
                    // default to Component
                </p>
                <p>
                    $this_component = new Component;
                </p>
                <p>
                    $this_component-&gt;form_input($input);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    Parent Component class has a fully fleshed out form_input( ) method that
    really shouldn’t be overwritten. It will route the data to the class and
    method indicated in the dossier submitted with the form.
</p>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<p>
    <u></u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="installed">Installed</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Method that is called when the component is installed. Method is empty in
    the base class and is meant to be overwritten. The installed() method is
    invoked when a component is installed using the Manage Components page
    included with the basic Nestor Install. If your component will need to add
    anything into the system, such as Roles or datalists, this would be a good
    place to add them.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    installed()
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="162" valign="top">
                <p>
                    No parameters
                </p>
            </td>
            <td width="576" valign="top">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    example
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
    <u> </u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="preload_component">Preload Component</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Method that is called when the component is pre-loaded during the page
    build process. This is where you would add definitions for any hooks you
    want to invoke. A hook tells the Nestor core engine to call a method in
    this Component at a defined time. See the Hooks section for information
    about where and when specific hooks are invoked. Can also fire stuff off,
    before page object is built. Could use for logging, change theme based on
    the site role, redirect URL for temp site maintenance.
</p>
<p>
    When this method returns false, it is informing the system that it does not
    want to add any hooks into the system.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    preload_component()
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="162" valign="top">
                <p>
                    No parameters
                </p>
            </td>
            <td width="576" valign="top">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="158" valign="top">
            </td>
            <td width="104" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="673" valign="top">
                <p>
                    Returns false by default, which indicates that this
                    component is not adding any hooks into the system.
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
            </td>
            <td width="104" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="673" valign="top">
                <p>
                    Contains arrays which define each individual hook to add.
                </p>
                <p>
                    When this component is installed by Manage Components, if
                    this method does not return false this component is added
                    to the preloaded_components list in the [<em>your_db</em>
                    ]_site_meta table. This tells the $site object to call this
                    component during the page build process, and it’s hooks are
                    loaded into the $site-&gt;hooks array.
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
        <tr>
            <td width="936" colspan="4" valign="top">
                <p>
                    Members of the returned array
                </p>
            </td>
        </tr>
        <tr>
            <td width="158" valign="top">
                <p>
                    [hook name]
                </p>
            </td>
            <td width="104" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="673" valign="top">
                <p>
                    The value should be the Class name and method that this
                    hook will call, formatted in this manner:
                    [Class_Name]::[Method_Name]
                </p>
                <p>
                    The method must be in the Class indicated, or the system
                    will throw an error. The hook name must be an existing hook
                    that is called somewhere in the system. See the Hooks
                    section for a list of existing hooks used by the core
                    engine.
                </p>
            </td>
            <td width="1">
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    /**
                </p>
                <p>
                    * add a hook that fires at initiation of site hooks
                </p>
                <p>
                    */
                </p>
                <p>
                    public function preload_component() {
                </p>
                <p>
                    $content_hook = array (
                </p>
                <p>
                    'site_hook_initiation' =&gt;
                    'Media::require_once_mediatype'
                </p>
                <p>
                    );
                </p>
                <p>
                    return $content_hook;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="recipe_components">Recipe Components</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Called from Page::build_content( ), goes through the recipe and creates
    components. Instantiates each component, then checks if user can add this
    component to a page. If so, creates dossiers for the component that are
    used for form submissions. Calls add_content( ) which adds content that
    will allow users to add, update, or delete this component on a page. Also
    will call recipe_manifestation() to show a representation of the component
    even if component has not yet been created, which can be useful for testing
    your component.
</p>
<p>
    Recipe Components uses the concepts of auto_create forward/reverse to
    determine if components before or after the current component in the
    hierarchy should be automatically created. For example:
</p>
<p>
    component_2 has auto_create = forward
</p>
<p>
    component_1
</p>
<p>
    - component_2
</p>
<p>
    When you create component_1, component_2 will be automatically created.
    Used a lot, like when using Access.
</p>
<p>
    - - - - - - - - - -
</p>
<p>
    component_1 has auto_create = backwards
</p>
<p>
    component_1
</p>
<p>
    - component_2
</p>
<p>
    Nestor will allow you to create component_2, and when you do, component_1
    will be automatically created. Very rare, only used to allow people to
    upload and create a media item immediately. Upload a video, then asset
    component gets created to create context.
</p>
<p>
    Technically, you can do both:
</p>
<p>
    - auto_create_backwards
</p>
<p>
    - - The Component Being Created
</p>
<p>
    - - - auto_create_forwards
</p>
<p>
This method is critical for page build so    <strong>we highly recommend not overwriting it or changing it.</strong>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    recipe_components($each_component, $vce,
                    $auto_create_reverse = null)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $each_component
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The component currently being processed by the Page Build
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    The global $vce object, passed for convenience
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $auto_create_reverse
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Determines if components can automatically be created ahead
                    of or following the current component
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Hooks
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    page_requested_components receives $each_recipe_component
                    before checking if the user can add the component.
                    $each_recipe_component is the recipe for the next possible
                    component after the component currently being processed.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling this Method
</h4>
<p>
    build_content method in Page checks that component allows sub components to
    be built. If true, call to recipe_components to build out sub components
    for the current component.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    if
                    ($this_component-&gt;allow_sub_components($each_component,
                    $vce)) {
                </p>
                <p>
                    // check if prevent_sub_components has been set by previous
                </p>
                <p>
                    // allow_sub_components call
                </p>
                <p>
                    if (!isset($this-&gt;prevent_sub_components)) {
                </p>
                <p>
                    $this_component-&gt;recipe_components($each_component,
                    $vce);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
    <u></u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="recipe_fields">Recipe Fields</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Adds component fields used in ManageRecipes.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    recipe_fields($recipe)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $recipe
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Contains all the information for the page recipe
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Return false if you do not want the component to be
                    available to add to a recipe
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    Return HTML text that will create the recipe fields for the
                    component
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method
</h4>
<p>
    recipe_fields( ) is called by ManageRecipes to determine if a component
    should be available to add to a recipe, and to create the fields used to
    configure the component when it’s added to a recipe.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $recipe_fields =
                    $access-&gt;recipe_fields(array('type'=&gt;$key));
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Overwriting the Method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function recipe_fields($recipe) {
                </p>
                <p>
                    $title = isset($recipe['title']) ? $recipe['title'] :
                </p>
                <p>
                    self::component_info()['name'];
                </p>
                <p>
                    $elements = &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;input type="hidden" name="auto_create"
                    value="forward"&gt; &lt;label&gt; &lt;input type="text"
                    name="title" value="$title" tag="required"
                    autocomplete="off"&gt; &lt;div class="label-text"&gt;
                    &lt;div class="label-message"&gt;Title&lt;/div&gt; &lt;div
                    class="label-error"&gt;Enter a Title&lt;/div&gt;
                    &lt;/div&gt; &lt;/label&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    return $elements;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
    <u></u>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="recipe_manifestation">Recipe Manifestation</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Allows for content to be displayed when component is contained within the
    recipe, regardless if a component was created.
</p>
<p>
    This is a ghostly apparition of a sub recipe item.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    recipe_manifestation ($each_recipe_component, $page)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="288" valign="top">
                <p>
                    $each_recipe_component
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The recipe component for which you are creating content
                </p>
            </td>
        </tr>
        <tr>
            <td width="288" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The global vce object, passed for convenience
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return value by default
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the Method
</h4>
<p>
    recipe_manifestation is called from Component recipe_components during the
    Page Build. If the current component doesn’t exist, call the parent
    Component class. Either way, this content will be added to the page.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $this_component = new $component_type();
                </p>
                <p>
                    $this_component-&gt;recipe_manifestation((object)
                    $each_recipe_component,
                </p>
                <p>
                    $vce);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    In this example, the method prints out function to show that this show that
    this component is included in the current recipe.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public static function
                    recipe_manifestation($each_recipe_component, $vce) {
                </p>
                <p>
                    $content = &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;div class="clickbar-container
                    create-observation-container"&gt;
                </p>
                <p>
                    &lt;div class="clickbar-content"&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    $vce-&gt;content-&gt;add('main',$content);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="recipe_manifestation_finished">
                        Recipe Manifestation Finish
                    </a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Closes the content to be displayed when component is contained within the
    recipe, regardless if a component was created.
</p>
<p>
    This is a ghostly apparition bookend for recipe_manifestation and occures
    after sub_component item.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    recipe_manifestation_finish ($each_recipe_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="288" valign="top">
                <p>
                    $each_recipe_component
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The recipe component for which you are creating content
                </p>
            </td>
        </tr>
        <tr>
            <td width="288" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The global vce object, passed for convenience
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return value by default
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the Method
</h4>
<p>
    recipe_manifestation_finish() is called from Component::recipe_components()
    during the Page Build. It closes the content from recipe_manifestation().
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $previous_component = new $component_type();
                </p>
                <p>
                    previous_component-&gt;recipe_manifestation_finish((object)
                </p>
                <p>
                    $each_recipe_component, $vce);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    In this example, the method closes out the recipe manifestation.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public static function
                    recipe_manifestation_finish($each_recipe_component, $vce) {
                </p>
                <p>
                    $content = &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;div&gt;end manifestation&lt;/div&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    $vce-&gt;content-&gt;add('main',$content);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="revise_component">Revise Component</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Creates dossiers that are used by the edit component form on a page and
    adds them to $each_component. Then calls self::
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#edit_component"
    >
        edit_component
    </a>
    () to integrate them into HTML on a page. The method is fairly fleshed out
    in the parent Component class, you can overwrite it to include other values
    in the dossier that your component may need to update itself.
</p>
<p>
    *note that this method isn’t currently called within Nestor, but has been
    added for consistency
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    revise_component($each_component, $vce)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="288" valign="top">
                <p>
                    $each_recipe_component
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The recipe component for which you are creating content
                </p>
            </td>
        </tr>
        <tr>
            <td width="288" valign="top">
                <p>
                    $vce
                </p>
            </td>
            <td width="150" valign="top">
                <p>
                    Object
                </p>
            </td>
            <td width="498" valign="top">
                <p>
                    The global vce object, passed for convenience
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return by default
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Calling the Method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $this_component-&gt;revise_component($each_component,
                    $vce);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="removed">Removed</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Method that is called when the component is removed. Method is empty in the
    base class and is meant to be overwritten. The removed() method is invoked
    when a component is deleted using the Manage Components page included with
    the basic Nestor Install. If your component has added anything into the
    system, such as Roles or datalists, this would be a good place to remove
    them.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    removed()
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="162" valign="top">
                <p>
                    No parameters
                </p>
            </td>
            <td width="576" valign="top">
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No return values by default
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    This example shows how associated datalists and metadata are removed from
    the database when the component is removed.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function removed() {
                </p>
                <p>
                    global $site;
                </p>
                <p>
                    $attributes = array (
                </p>
                <p>
                    'datalist' =&gt; 'institutions_datalist');
                </p>
                <p>
                    $site-&gt;remove_datalist($attributes);
                </p>
                <p>
                    global $db;
                </p>
                <p>
                    $meta_data = array('institution','program');
                </p>
                <p>
                    foreach ($meta_data as $each_data) {
                </p>
                <p>
                    // delete user from database
                </p>
                <p>
                    $where = array('meta_key' =&gt; $each_data);
                </p>
                <p>
                    $db-&gt;delete('users_meta', $where);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the Method
</h4>
<p>
    This example shows removed() being called from the ManageComponents
    component, when a user clicks the delete button for a component.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $removed = $component-&gt;removed();
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="update">Update</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Kicks off the process to update a component. Calls update_component method
    to update the component and data passed in the $input array. Is called
    asynchronously when a user chooses to update a component a page, and
    submits a component form with a dossier with ‘procedure’ set to ‘update’.
    Adds a site attribute with a message that the specified component was
    updated.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    update($input)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $input
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array that contains properties of new component that will
                    be created
                </p>
            </td>
        </tr>
        <tr>
            <td width="936" colspan="3" valign="top">
                <p>
                    Potential members of the $input array
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    component_id
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    ID of component to update
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    created_at
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Timestamp of when the component was created, is used to
                    compare with database entity to make sure we’re updating
                    the right component
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    url
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    url associated with the component, if set in $input will be
                    cleaned by url_checker method
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    sequence
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Order in which this component will be rendered on the page
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    [<em>key</em>]
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Any other key/value pairs in $input. Metadata will be
                    updated if the key exists for this component, and added if
                    the key doesn’t already exist. These key/value pairs will
                    most likely come from from form fields from which this
                    request was submitted, but could be added in the update()
                    function.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    Echos success or failure message
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Calling the Method
</h4>
<p>
    The update method is not normally called verbatim in PHP code, but instead
    is triggered when the procedure value in a dossier is set to ‘create’, and
    a form with this dossier is submitted from a page. See the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#form_input"
    >
        Form Input
    </a>
    section for more details.
</p>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    The Media class invokes a hook and then returns a message indicating
    success or error depending on the return value of its update_component
    method.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    protected function update($input) {
                </p>
                <p>
                    global $vce;
                </p>
                <p>
                    // load media_update_component hooks
                </p>
                <p>
                    if (isset($site-&gt;hooks['media_update_component'])) {
                </p>
                <p>
                    foreach($site-&gt;hooks['media_update_component'] as $hook)
                    {
                </p>
                <p>
                    $input = call_user_func($hook, $input);
                </p>
                <p>
                    }
                </p>
                <p>
                    }
                </p>
                <p>
                    if (self::update_component($input)) {
                </p>
                <p>
                    echo json_encode(array('response' =&gt; 'success',
                </p>
                <p>
                    'procedure' =&gt; 'update','action' =&gt; 'reload',
                </p>
                <p>
                    'message' =&gt; "Updated"));
                </p>
                <p>
                    return;
                </p>
                <p>
                    }
                </p>
                <p>
                    echo json_encode(array('response' =&gt; 'error',
                </p>
                <p>
                    'procedure' =&gt; 'update','message' =&gt; "Error"));
                </p>
                <p>
                    return;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="update_component">Update Component</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Called by Component update method. Receives an array of properties and uses
    these properties to update records in the database for the specified
    component.
</p>
<p>
    Updates an existing component in [<em>your_db</em>]_components table using
    parent_id, sequence, and url. Updates or adds any other data as key/value
    pairs to [<em>your_db</em>]_components_meta table.
</p>
<p>
    If the component has an alias_id set in the [<em>your_db</em>
    ]_components_meta table, only sequence and URL are updated and none of the
    metadata will be updated.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    update_component($input)
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $input
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Array
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Array that contains properties of new component that will
                    be created
                </p>
            </td>
        </tr>
        <tr>
            <td width="936" colspan="3" valign="top">
                <p>
                    Potential members of the $input array
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    component_id
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    ID of component to update
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    created_at
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Timestamp of when the component was created, is used to
                    compare with database entity to make sure we’re updating
                    the right component
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    url
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    url associated with the component, if set in $input will be
                    cleaned by url_checker method
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    sequence
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Order in which this component will be rendered on the page
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    [<em>key</em>]
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Any other key/value pairs in $input. Metadata will be
                    updated if the key exists for this component, and added if
                    the key doesn’t already exist. These key/value pairs will
                    most likely come from from form fields from which this
                    request was submitted, but could be added in the update()
                    function.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    Boolean
                </p>
            </td>
            <td width="738" valign="top">
                <p>
                    True if component is successfully updated, false if
                    unsuccessful update, which can be due to
                    $input[‘created_at’] value not matching the value for the
                    specified component in the [<em>your_db</em>
                    ]_components_meta table.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
</h4>
<h4>
    Example – Calling the Method<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $update_status = self::update_component($input);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Example – Overwriting the Method
</h4>
<p>
    This method is fleshed out in the parent Component Class, and we don’t
    recommend overwriting it. If you need to customize the component update
    process, use the
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#update"
    >
        update method
    </a>
    .
</p>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h2>
                    <a name="core_functions">Core </a>
                    Functions
                </h2>
            </td>
        </tr>
    </tbody>
</table>
<p>
    In order for your Component to take full advantage of the security and flow
    continuity provided by the Nestor framework, certain functions need to be
    routed properly.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="form_submission">Form Submission</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Nestor has a specific procedure that must be followed to eliminate common
    form submission security vulnerabilities.
</p>
<p>
    If you’d like to collect and process user data with your component, there
    are a few pieces that need to be in place. Many of these are provided by
    the Nestor framework by default, but you will need to manage some of them
    in your code. Once you understand the form submission procedure, you will
    be able to take full advantage of it to interact with your end users.
</p>
<h3>
    Form Submission Process
</h3>
<p>
    1) Any form with the class "asynchronous-form" will invoke the submit
    function in vce.js, and the form will be submitted asynchronously
</p>
<p>
    2) The form is submitted to the path designated by $vce-&gt;input_path. By
    default this is [<em>my_site_url</em>]/input
</p>
<p>
    3) Form input is routed to input/input.php, which decrypts the dossier and
    sanitizes and re-keys all dossier and form field values into an input array
</p>
<p>
    4) Input Class checks if there is a form_input method in specified class,
    if not it calls form_input in Component class
</p>
<p>
    5) Form_input routes the input array to the designated procedure – which is
    the class/method in the dossier
</p>
<p>
    6) Procedure processes the data
</p>
<p>
    7) Control passed back to originating javascript call, which displays any
    messages echoed by PHP methods
</p>
<h3>
    Form Fields
</h3>
<p>
    Your component needs to create the HTML content for the form fields, which
    must include values for the following.
</p>
<p>
    1) A hidden input that contains an encrypted dossier. A dossier is
    basically an array of values that designate the component type, the
    procedure that is called in the component when the form is submitted, the
    component_id and the “created_at” value. Other values can be added based on
    your component’s needs. The encrypted dossier is generated by calling
    $vce-&gt;page-&gt;generate_dossier($dossier).
</p>
<p>
    Depending on what point in the page build process you are calling this
    method, the component may already have dossiers available for create,
    update and delete. If these suit your needs you can use them without having
    to generate a new dossier. But sometimes it’s just safer to go ahead and
    create the dossier before you use it.
</p>
<p>
    2) A hidden input that contains the site input path, designated by
    $vce-&gt;input_path
</p>
<p>
    3) Your form fields from which you’ll collect user data
</p>
<h4>
    Example – Generating a Dossier and Creating Form Fields
</h4>
<p>
    The Blog-o-rama example has a create_contact_form method that shows how to
    generate a dossier and populate form fields with hidden values.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function create_contact_form($each_component, $vce)
                    {
                </p>
                <p>
                    $dossier = array(
                </p>
                <p>
                    'type' =&gt; 'Blogorama',
                </p>
                <p>
                    'procedure' =&gt; 'update_contact',
                </p>
                <p>
                    'component_id' =&gt; $each_component-&gt;component_id,
                </p>
                <p>
                    'created_at' =&gt; $each_component-&gt;created_at
                </p>
                <p>
                    );
                </p>
                <p>
                    // generate dossier
                </p>
                <p>
                    $each_component-&gt;dossier_for_contact =
                </p>
                <p>
                    $vce-&gt;generate_dossier($dossier);
                </p>
                <p>
                    $contact_form = &lt;&lt;&lt;EOF
                </p>
                <p>
                    &lt;div id="text-block-container add-container"&gt;
                </p>
                <p>
                    &lt;div class="clickbar-container"&gt;
                </p>
                <p>
                    &lt;div class="clickbar-content"&gt;
                </p>
                <p>
                    &lt;form id="create_media" class="asynchronous-form"
                    method="post" action="$vce-&gt;input_path"
                    autocomplete="off"&gt;
                </p>
                <p>
                    &lt;input type="hidden" name="dossier"
                    value="$each_component-&gt;dossier_for_contact"&gt;
                </p>
                <p>
                    &lt;input type="hidden" name="title" value="Contact
                    Info"&gt;
                </p>
                <p>
                    &lt;label&gt; &lt;input type="text"
                    name="contact_email"&gt; &lt;div class="label-text"&gt;
                    &lt;div class="label-message"&gt;Email&lt;/div&gt; &lt;div
                    class="label-error"&gt;Enter an email&lt;/div&gt;
                    &lt;/div&gt; &lt;/label&gt;
                </p>
                <p>
                    &lt;input type="hidden" name="sequence"
                    value="$each_component-&gt;sequence"&gt;
                </p>
                <p>
                    &lt;input type="submit" value="Sign Up"&gt;
                </p>
                <p>
                    &lt;/form&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;div class="clickbar-title
                    clickbar-closed"&gt;&lt;span&gt;Contact
                    Form&lt;/span&gt;&lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    &lt;/div&gt;
                </p>
                <p>
                    EOF;
                </p>
                <p>
                    return $contact_form;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    The create_contact_form method is called from as_content in the Blogorama
    class to allow the form content to be written to the rendered page.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function as_content($each_component, $vce) {
                </p>
                <p>
                    //$my_content = $this-&gt;component_info();
                </p>
                <p>
                    $display_content = "Blog-o-rama says hello!";
                </p>
                <p>
                    $display_content .=
                    $this-&gt;create_contact_form($each_component,
                </p>
                <p>
                    $vce);
                </p>
                <p>
                    $vce-&gt;content-&gt;add('main', $display_content);
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h3>
    Processing Data from your Component
</h3>
<p>
    The simplest way to receive data is to use the inherent update function in
    the Component class. In this case you’d use a procedure value of ‘update’
    in the dossier. By default, the ‘update’ procedure will update any existing
    metadata, or add metadata with keys that do not currently exist in the
    components_meta table for the designated component.
</p>
<p>
    If you want to perform anything more complex, you’ll need to write a method
    that matches the name of the procedure you used in your dossier. This
    method can process your data using many of the Nestor features, such as
    creating/updating datalists, updating component metadata, or simply
    changing the display.
</p>
<p>
    In the Blogorama example, the update_contact method is the designated
    procedure in the dossier. In this case the method calls to the
    $vce-&gt;dump method which simply echos the contents of the array to the
    page.
</p>
<p>
    The echo command returns a message to the originating js call, which will
    be displayed on your page once the server is finished processing data.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function update_contact($input) {
                </p>
                <p>
                    global $vce;
                </p>
                <p>
                    $vce-&gt;dump($input);
                </p>
                <p>
                    echo json_encode(array('response' =&gt; 'success',
                </p>
                <p>
                    'procedure' =&gt; 'create','action' =&gt; 'reload',
                </p>
                <p>
                    'message' =&gt; 'This is only a test'));
                </p>
                <p>
                    return;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h3>
    Ways to Subvert the Form Submission Process
</h3>
<p>
    1) Overwrite the form_input method from the parent Component class. Be
    careful if you do this, and make sure to keep the important elements that
    allow your input to be processed
</p>
<p>
    2) Write a custom method to process your data, and make sure it’s the
    designated procedure in your dossier
</p>
<p>
    3) Customize your form fields that you add to a page. You can have multiple
    forms with multiple dossiers
</p>
<p>
    4) Overwrite the input path and create your own component to route the
    data.
</p>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    <a name="file_upload">File Upload</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    There are some components which allow a user to upload a file. This can be
    useful in many scenarios. There are two methods involved in building and
    adding the file upload element to a page:
</p>
<p>
    1) File_upload returns true or false. The file upload element will only be
    added if this method returns true. Use this method to test conditions to
    determine if the element should be added to the page.
</p>
<p>
    2) Add_file_uploader will create the HTML content to add a file upload
    element to the page, and returns this content.
</p>
<p>
    The Blogorama Class has a working example using the file_upload and
    add_file_uploader methods to add a file upload element to the page.
</p>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h2>
                    <a name="troubleshooting_tools">Troubleshooting Tools</a>
                </h2>
            </td>
        </tr>
    </tbody>
</table>
<p>
    The complexity of Nestor allows the system a great deal of flexibility,
    however it can lead to some difficult troubleshooting scenarios. There are
    some useful functions that will help you trace and debug your code.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    Dump
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    The dump method located in $vce allows you to display the contents of a
    value to the screen. Note that this doesn’t always work, depending on what
    point during the page build process you call the function.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    dump($var, $color = 'ffc')
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $var
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Mixed
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    If given a
                    <a
                        href="http://php.net/manual/en/language.types.string.php"
                    >
                        string
                    </a>
                    ,
                    <a
                        href="http://php.net/manual/en/language.types.integer.php"
                    >
                        integer
                    </a>
                    or
                    <a href="http://php.net/manual/en/language.types.float.php">
                        float
                    </a>
                    , the value itself will be printed. If given an
                    <a href="http://php.net/manual/en/language.types.array.php">
                        array
                    </a>
                    , values will be presented in a format that shows keys and
                    elements.
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $color
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Hex value for the color of the background shown behind the
                    value printed
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No values returned
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    $vce-&gt;dump($each_component);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    Log
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    If you aren’t seeing results using the dump function, or the logic you are
    testing is in a complex chain of function calls, using the $vce log
    function can be very useful. Anything you send to $vce-&gt;log will be
    added to the log.txt file found in the root folder of your Nestor
    installation. You can designate a different file, just know that the path
    will be built from your root folder.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    log($var, $file = "log.txt")
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Parameters
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
                <p>
                    $var
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    Mixed
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Can be any type except a
                    <a
                        href="http://php.net/manual/en/language.types.resource.php"
                    >
                        resource
                    </a>
                </p>
            </td>
        </tr>
        <tr>
            <td width="198" valign="top">
                <p>
                    $file
                </p>
            </td>
            <td width="162" valign="top">
                <p>
                    String (Optional)
                </p>
            </td>
            <td width="576" valign="top">
                <p>
                    Name of the file to which information will be written.
                    Defaults to log.txt.
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
    Return
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="198" valign="top">
            </td>
            <td width="738" valign="top">
                <p>
                    No values returned
                </p>
            </td>
        </tr>
    </tbody>
</table>
<h4>
</h4>
<h4>
    Example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    //send components array details to the log file
                </p>
                <p>
                    $var = $vce-&gt;page-&gt;components;
                </p>
                <p>
                    $vce-&gt;log($var);
                </p>
            </td>
        </tr>
    </tbody>
</table>
<p>
    <a
        href="https://uwnetid.sharepoint.com/sites/og_cultivate-learning-nestor/Shared%20Documents/Documentation/Component%20Class%20API.docx#methods"
    >
        Back to Top
    </a>
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    Displaying Errors from Asynchronous Calls
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Many of the features of Nestor rely on asynchronous calls to the server.
    Errors on the server can be easily masked this way. Use the echo command to
    send messages back to the originating javascript call, which will display
    these messages.
</p>
<h4>
    Example
</h4>
<p>
    The create method of Component returns a success message if component was
    created, and an error message if not. A return value of ‘success’ will
    cause the page to reload, a return value of ‘error’ will display an error
    message on the page.
</p>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    if ($component_id) {
                </p>
                <p>
                    global $site;
                </p>
                <p>
                    $site-&gt;add_attributes('message',self::component_info()
                </p>
                <p>
                    ['name'] . ' Created');
                </p>
                <p>
                    echo json_encode(array('response' =&gt; 'success',
                </p>
                <p>
                    'procedure' =&gt; 'create','action' =&gt; 'reload',
                </p>
                <p>
                    'message' =&gt; 'Created','component_id' =&gt;
                    $component_id));
                </p>
                <p>
                    return;
                </p>
                <p>
                    } else {
                </p>
                <p>
                    echo json_encode(array('response' =&gt; 'error',
                </p>
                <p>
                    'procedure' =&gt; 'update','message' =&gt; "Error"));
                </p>
                <p>
                    return;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    Adding a Hook
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    Hooks are a powerful tool that allow your component to 'hook into' the
    Nestor engine at various stages of the page build process, as well as any
    place in the code where a hook has been inserted. A hook is configured
    within a component class and designates a class and method to call when the
    hook is invoked within the system. In the Nestor system, a class/method
    pairing is known as a procedure.
</p>
<p>
    Read the Hooks Section for detailed information about what hooks are
    available in the Nestor system and how they can influence the function of
    the core engine classes.
</p>
<h3>
    Hook configuration
</h3>
<p>
    During the page build process, the procedure/hook associations are loaded
    into a hooks array that’s added to the global $site object. The Hooks
    Definition and Load Process flow chart shows the end-to-end process of
    defining a hook and loading into the system for use.
</p>
<p>
    To assign a procedure to a hook, overwrite the preload_component method in
    your component.
</p>
<h4>
    Hook configuration example<strong></strong>
</h4>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <p>
                    public function preload_component() {
                </p>
                <p>
                    $content_hook = array (
                </p>
                <p>
                    'page_requested_url' =&gt; 'Input::page_requested_url'
                </p>
                <p>
                    );
                </p>
                <p>
                    return $content_hook;
                </p>
                <p>
                    }
                </p>
            </td>
        </tr>
    </tbody>
</table>
<table border="1" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td width="935" valign="top">
                <h3>
                    Build a Component with Minions
                </h3>
            </td>
        </tr>
    </tbody>
</table>
<p>
    There are some cases where you may want to create a component that will
    have a number of sub-components, referred to as Minions, that it can
    interact with in a standardized manner. The Media/MediaType Components are
    an example of this relationship.
</p>
<p>
    You can add a Media component to a recipe, and then in the recipe you can
    designate which of its Minions will be available for end users to add to
    their page. Minion components must be installed and activated before they
    will appear as an option in the Media component configuration in a Recipe.
    In the figure below, you can see the Image, Text, and PDF Minions appear in
    the Media component configuration.
</p>
<p>
    <img
        border="0"
        width="803"
        height="510"
        src="file:///C:/Users/cdoring/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg"
    />
</p>
<p>
    <em>Media component in a recipe with Minion selection</em>
</p>
<p>
    <img
        border="0"
        width="936"
        height="277"
        src="file:///C:/Users/cdoring/AppData/Local/Temp/msohtmlclip1/01/clip_image003.png"
    />
</p>
<p>
    <em>
        Media content choices for the end user, all Minion types represented
    </em>
</p>
<h3>
    Master/Minion Class Structure
</h3>
<p>
    The master class (Media) extends Component class, while the Minion
    component classes extend a Minion parent class that you will need to
    create. In the case of the Media parent component, it’s Minions all extend
    Class MediaType. Each of these classes must contain methods to perform
    certain operations to make sure the Minions are properly associated with
    their Master component.
</p>
<h3>
    Master Component Class
</h3>
<p>
    The Master Class needs to perform the following operations to find and
    connect to its Minions.
</p>
<p>
    1) Create a hook in the preload_component method
</p>
<p>
    2) Use the hook to call a method that loads in the Minion Parent class (ie
    MediaType)
</p>
<p>
    3) In the as_content method, load in the list of minions. This list takes
the form of an array that’s a property of $site, labeled enabled_[    <em>Minion parent class name</em>]s. ( ie enabled_mediatypes)
</p>
<p>
    a. The enabled_[<em>Minion parent class name</em>]s array is created and
    populated by the Manage Components page each time the Master component is
    added or updated. It’s populated with all of its active Minions. It will be
    given the name enabled_[<em>Minion parent class name</em>]s by default.
</p>
<p>
    b. Cycle through the Minion array and load each of their class files
</p>
<p>
    4) Call a class, ie edit_media_component, to generate dossiers and to call
    the edit function of each Minion
</p>
<p>
    5) In the add_component function, add code to make sure each minion shows
    up as a checkbox
</p>
<p>
    6) Create a subfolder under the master folder for the Minion parent class
    files
</p>
<h3>
    Minion Classes
</h3>
<p>
    1) Create a separate folder in the [my_nestor]-content\components folder to
    host each minion, create a class file for each Minion in its respective
    folder
</p>
<p>
    2) The parent Minion class should have a generic methods for display that
    each Minion will overwrite
</p>
<p>
    3) The parent Minion class needs a method to add each Minion, using
    dossiers created by the master class
</p>
<p>
    4) The Minion classes will need to flesh out the display method to generate
    content for themselves
</p>

</div>

 
</body>
</html>